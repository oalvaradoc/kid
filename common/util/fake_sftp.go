// Code generated by MockGen. DO NOT EDIT.
// Source: git.forms.io/legobank/legoapp/util/sftp.go

// Package util is a generated GoMock package.
package util

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sftp "github.com/pkg/sftp"
)

// MockSftpHandler is a mock of SftpHandler interface.
type MockSftpHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSftpHandlerMockRecorder
}

// MockSftpHandlerMockRecorder is the mock recorder for MockSftpHandler.
type MockSftpHandlerMockRecorder struct {
	mock *MockSftpHandler
}

// NewMockSftpHandler creates a new mock instance.
func NewMockSftpHandler(ctrl *gomock.Controller) *MockSftpHandler {
	mock := &MockSftpHandler{ctrl: ctrl}
	mock.recorder = &MockSftpHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSftpHandler) EXPECT() *MockSftpHandlerMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockSftpHandler) CreateClient(host string, port int, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", host, port, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockSftpHandlerMockRecorder) CreateClient(host, port, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockSftpHandler)(nil).CreateClient), host, port, username, password)
}

// CreateClientUseKey mocks base method.
func (m *MockSftpHandler) CreateClientUseKey(host string, port int, username string, key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientUseKey", host, port, username, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientUseKey indicates an expected call of CreateClientUseKey.
func (mr *MockSftpHandlerMockRecorder) CreateClientUseKey(host, port, username, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientUseKey", reflect.TypeOf((*MockSftpHandler)(nil).CreateClientUseKey), host, port, username, key)
}

// ClientClose mocks base method.
func (m *MockSftpHandler) ClientClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClientClose indicates an expected call of ClientClose.
func (mr *MockSftpHandlerMockRecorder) ClientClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientClose", reflect.TypeOf((*MockSftpHandler)(nil).ClientClose))
}

// Upload mocks base method.
func (m *MockSftpHandler) Upload(srcPath, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", srcPath, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockSftpHandlerMockRecorder) Upload(srcPath, dstPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockSftpHandler)(nil).Upload), srcPath, dstPath)
}

// UploadFromReader mocks base method.
func (m *MockSftpHandler) UploadFromReader(srcFile io.ReadCloser, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFromReader", srcFile, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFromReader indicates an expected call of UploadFromReader.
func (mr *MockSftpHandlerMockRecorder) UploadFromReader(srcFile, dstPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFromReader", reflect.TypeOf((*MockSftpHandler)(nil).UploadFromReader), srcFile, dstPath)
}

// Download mocks base method.
func (m *MockSftpHandler) Download(srcPath, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", srcPath, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockSftpHandlerMockRecorder) Download(srcPath, dstPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockSftpHandler)(nil).Download), srcPath, dstPath)
}

// MoveTo mocks base method.
func (m *MockSftpHandler) MoveTo(srcPath, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveTo", srcPath, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveTo indicates an expected call of MoveTo.
func (mr *MockSftpHandlerMockRecorder) MoveTo(srcPath, dstPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveTo", reflect.TypeOf((*MockSftpHandler)(nil).MoveTo), srcPath, dstPath)
}

// GetSftpClient mocks base method.
func (m *MockSftpHandler) GetSftpClient() *sftp.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSftpClient")
	ret0, _ := ret[0].(*sftp.Client)
	return ret0
}

// GetSftpClient indicates an expected call of GetSftpClient.
func (mr *MockSftpHandlerMockRecorder) GetSftpClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSftpClient", reflect.TypeOf((*MockSftpHandler)(nil).GetSftpClient))
}

// FileOpen mocks base method.
func (m *MockSftpHandler) FileOpen(path string) (*sftp.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileOpen", path)
	ret0, _ := ret[0].(*sftp.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileOpen indicates an expected call of FileOpen.
func (mr *MockSftpHandlerMockRecorder) FileOpen(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileOpen", reflect.TypeOf((*MockSftpHandler)(nil).FileOpen), path)
}

// FileClose mocks base method.
func (m *MockSftpHandler) FileClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// FileClose indicates an expected call of FileClose.
func (mr *MockSftpHandlerMockRecorder) FileClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileClose", reflect.TypeOf((*MockSftpHandler)(nil).FileClose))
}
