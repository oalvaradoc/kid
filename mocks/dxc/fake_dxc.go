// Code generated by MockGen. DO NOT EDIT.
// Source: git.multiverse.io/eventkit/kit/handler/transaction/manager (interfaces: TxnManager)

// Package dxc is a generated GoMock package.
package dxc

import (
	"git.multiverse.io/eventkit/kit/common/errors"
	reflect "reflect"

	contexts "git.multiverse.io/eventkit/kit/contexts"
	gomock "github.com/golang/mock/gomock"
)

// MockTxnManager is a mock of TxnManager interface.
type MockTxnManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxnManagerMockRecorder
}

// MockTxnManagerMockRecorder is the mock recorder for MockTxnManager.
type MockTxnManagerMockRecorder struct {
	mock *MockTxnManager
}

// NewMockTxnManager creates a new mock instance.
func NewMockTxnManager(ctrl *gomock.Controller) *MockTxnManager {
	mock := &MockTxnManager{ctrl: ctrl}
	mock.recorder = &MockTxnManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxnManager) EXPECT() *MockTxnManagerMockRecorder {
	return m.recorder
}

// TxnBegin mocks base method.
func (m *MockTxnManager) TxnBegin(arg0 *contexts.HandlerContexts, arg1 string, arg2 int, arg3 []byte, arg4 string, arg5 map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxnBegin", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxnBegin indicates an expected call of TxnBegin.
func (mr *MockTxnManagerMockRecorder) TxnBegin(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxnBegin", reflect.TypeOf((*MockTxnManager)(nil).TxnBegin), arg0, arg1, arg2, arg3, arg4, arg5)
}

// TxnEnd mocks base method.
func (m *MockTxnManager) TxnEnd(handlerContexts *contexts.HandlerContexts, serverAddress string, rootXid string, parentXid string, branchXid string, ok bool, tryReturnError *errors.Error, headers map[string]string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxnEnd", reflect.TypeOf((*MockTxnManager)(nil).TxnBegin), handlerContexts, serverAddress, rootXid, parentXid, branchXid, ok, tryReturnError, headers)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxnEnd indicates an expected call of TxnEnd.
func (mr *MockTxnManagerMockRecorder) TxnEnd(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxnEnd", reflect.TypeOf((*MockTxnManager)(nil).TxnEnd), arg0, arg1, arg2, arg3, arg4, arg5)
}

// TxnJoin mocks base method.
func (m *MockTxnManager) TxnJoin(arg0 *contexts.HandlerContexts, arg1, arg2, arg3 string, arg4 int, arg5 []byte, arg6 string, arg7 map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxnJoin", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxnJoin indicates an expected call of TxnJoin.
func (mr *MockTxnManagerMockRecorder) TxnJoin(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxnJoin", reflect.TypeOf((*MockTxnManager)(nil).TxnJoin), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}
