// Code generated by MockGen. DO NOT EDIT.
// Source: git.multiverse.io/eventkit/common/model/glsdef (interfaces: GLSInterface)

// Package gls is a generated GoMock package.
package gls

import (
	reflect "reflect"

	glsdef "git.multiverse.io/eventkit/kit/common/model/glsdef"
	gomock "github.com/golang/mock/gomock"
)

// MockGLSInterface is a mock of GLSInterface interface.
type MockGLSInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGLSInterfaceMockRecorder
}

// MockGLSInterfaceMockRecorder is the mock recorder for MockGLSInterface.
type MockGLSInterfaceMockRecorder struct {
	mock *MockGLSInterface
}

// NewMockGLSInterface creates a new mock instance.
func NewMockGLSInterface(ctrl *gomock.Controller) *MockGLSInterface {
	mock := &MockGLSInterface{ctrl: ctrl}
	mock.recorder = &MockGLSInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGLSInterface) EXPECT() *MockGLSInterfaceMockRecorder {
	return m.recorder
}

// LookSuType mocks base method.
func (m *MockGLSInterface) LookSuType(arg0 glsdef.Dimension) (string, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookSuType", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookSuType indicates an expected call of LookSuType.
func (mr *MockGLSInterfaceMockRecorder) LookSuType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookSuType", reflect.TypeOf((*MockGLSInterface)(nil).LookSuType), arg0)
}

// Looklist mocks base method.
func (m *MockGLSInterface) Looklist(arg0 *glsdef.Element) ([]glsdef.PrimarySu, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Looklist", arg0)
	ret0, _ := ret[0].([]glsdef.PrimarySu)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Looklist indicates an expected call of Looklist.
func (mr *MockGLSInterfaceMockRecorder) Looklist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Looklist", reflect.TypeOf((*MockGLSInterface)(nil).Looklist), arg0)
}

// Lookup mocks base method.
func (m *MockGLSInterface) Lookup(arg0 glsdef.Dimension, arg1 *glsdef.Element) (*glsdef.PrimarySu, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0, arg1)
	ret0, _ := ret[0].(*glsdef.PrimarySu)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Lookup indicates an expected call of Lookup.
func (mr *MockGLSInterfaceMockRecorder) Lookup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockGLSInterface)(nil).Lookup), arg0, arg1)
}

// Lookups mocks base method.
func (m *MockGLSInterface) Lookups(arg0 glsdef.Dimension, arg1 []glsdef.Element) (*glsdef.LookupsStruct, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookups", arg0, arg1)
	ret0, _ := ret[0].(*glsdef.LookupsStruct)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Lookups indicates an expected call of Lookups.
func (mr *MockGLSInterfaceMockRecorder) Lookups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookups", reflect.TypeOf((*MockGLSInterface)(nil).Lookups), arg0, arg1)
}
