// Code generated by MockGen. DO NOT EDIT.
// Source: git.multiverse.io/eventkit/kit/handler/remote (interfaces: CallInc)

// Package remote is a generated GoMock package.
package remote

import (
	context "context"
	reflect "reflect"

	client "git.multiverse.io/eventkit/kit/client"
	errors "git.multiverse.io/eventkit/kit/common/errors"
	gomock "github.com/golang/mock/gomock"
)

// MockCallInc is a mock of CallInc interface.
type MockCallInc struct {
	ctrl     *gomock.Controller
	recorder *MockCallIncMockRecorder
}

// MockCallIncMockRecorder is the mock recorder for MockCallInc.
type MockCallIncMockRecorder struct {
	mock *MockCallInc
}

// NewMockCallInc creates a new mock instance.
func NewMockCallInc(ctrl *gomock.Controller) *MockCallInc {
	mock := &MockCallInc{ctrl: ctrl}
	mock.recorder = &MockCallIncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallInc) EXPECT() *MockCallIncMockRecorder {
	return m.recorder
}

// AsyncCall mocks base method.
func (m *MockCallInc) AsyncCall(arg0 context.Context, arg1, arg2 string, arg3 client.Request, arg4 ...client.CallOption) *errors.Error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AsyncCall", varargs...)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// AsyncCall indicates an expected call of AsyncCall.
func (mr *MockCallIncMockRecorder) AsyncCall(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCall", reflect.TypeOf((*MockCallInc)(nil).AsyncCall), varargs...)
}

// AsyncCalls mocks base method.
func (m *MockCallInc) AsyncCalls(arg0 context.Context, arg1 client.Request, arg2 ...client.CallOption) *errors.Error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AsyncCalls", varargs...)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// AsyncCalls indicates an expected call of AsyncCalls.
func (mr *MockCallIncMockRecorder) AsyncCalls(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCalls", reflect.TypeOf((*MockCallInc)(nil).AsyncCalls), varargs...)
}

// AsyncCallw mocks base method.
func (m *MockCallInc) AsyncCallw(arg0 context.Context, arg1, arg2, arg3 string, arg4 client.Request, arg5 ...client.CallOption) *errors.Error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AsyncCallw", varargs...)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// AsyncCallw indicates an expected call of AsyncCallw.
func (mr *MockCallIncMockRecorder) AsyncCallw(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCallw", reflect.TypeOf((*MockCallInc)(nil).AsyncCallw), varargs...)
}

// ReplyTo mocks base method.
func (m *MockCallInc) ReplyTo(arg0 context.Context, arg1 client.Response) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyTo", arg0, arg1)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// ReplyTo indicates an expected call of ReplyTo.
func (mr *MockCallIncMockRecorder) ReplyTo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTo", reflect.TypeOf((*MockCallInc)(nil).ReplyTo), arg0, arg1)
}

// SemiSyncCall mocks base method.
func (m *MockCallInc) SemiSyncCall(arg0 context.Context, arg1, arg2 string, arg3 client.Request, arg4 interface{}, arg5 ...client.CallOption) (client.ResponseMeta, *errors.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SemiSyncCall", varargs...)
	ret0, _ := ret[0].(client.ResponseMeta)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// SemiSyncCall indicates an expected call of SemiSyncCall.
func (mr *MockCallIncMockRecorder) SemiSyncCall(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SemiSyncCall", reflect.TypeOf((*MockCallInc)(nil).SemiSyncCall), varargs...)
}

// SemiSyncCalls mocks base method.
func (m *MockCallInc) SemiSyncCalls(arg0 context.Context, arg1 client.Request, arg2 interface{}, arg3 ...client.CallOption) (client.ResponseMeta, *errors.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SemiSyncCalls", varargs...)
	ret0, _ := ret[0].(client.ResponseMeta)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// SemiSyncCalls indicates an expected call of SemiSyncCalls.
func (mr *MockCallIncMockRecorder) SemiSyncCalls(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SemiSyncCalls", reflect.TypeOf((*MockCallInc)(nil).SemiSyncCalls), varargs...)
}

// SemiSyncCallw mocks base method.
func (m *MockCallInc) SemiSyncCallw(arg0 context.Context, arg1, arg2, arg3 string, arg4 client.Request, arg5 interface{}, arg6 ...client.CallOption) (client.ResponseMeta, *errors.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5}
	for _, a := range arg6 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SemiSyncCallw", varargs...)
	ret0, _ := ret[0].(client.ResponseMeta)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// SemiSyncCallw indicates an expected call of SemiSyncCallw.
func (mr *MockCallIncMockRecorder) SemiSyncCallw(arg0, arg1, arg2, arg3, arg4, arg5 interface{}, arg6 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5}, arg6...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SemiSyncCallw", reflect.TypeOf((*MockCallInc)(nil).SemiSyncCallw), varargs...)
}

// SyncCall mocks base method.
func (m *MockCallInc) SyncCall(arg0 context.Context, arg1, arg2 string, arg3 client.Request, arg4 interface{}, arg5 ...client.CallOption) (client.ResponseMeta, *errors.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncCall", varargs...)
	ret0, _ := ret[0].(client.ResponseMeta)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// SyncCall indicates an expected call of SyncCall.
func (mr *MockCallIncMockRecorder) SyncCall(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCall", reflect.TypeOf((*MockCallInc)(nil).SyncCall), varargs...)
}

// SyncCalls mocks base method.
func (m *MockCallInc) SyncCalls(arg0 context.Context, arg1 client.Request, arg2 interface{}, arg3 ...client.CallOption) (client.ResponseMeta, *errors.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncCalls", varargs...)
	ret0, _ := ret[0].(client.ResponseMeta)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// SyncCalls indicates an expected call of SyncCalls.
func (mr *MockCallIncMockRecorder) SyncCalls(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCalls", reflect.TypeOf((*MockCallInc)(nil).SyncCalls), varargs...)
}

// SyncCallw mocks base method.
func (m *MockCallInc) SyncCallw(arg0 context.Context, arg1, arg2, arg3 string, arg4 client.Request, arg5 interface{}, arg6 ...client.CallOption) (client.ResponseMeta, *errors.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5}
	for _, a := range arg6 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncCallw", varargs...)
	ret0, _ := ret[0].(client.ResponseMeta)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// SyncCallw indicates an expected call of SyncCallw.
func (mr *MockCallIncMockRecorder) SyncCallw(arg0, arg1, arg2, arg3, arg4, arg5 interface{}, arg6 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5}, arg6...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCallw", reflect.TypeOf((*MockCallInc)(nil).SyncCallw), varargs...)
}
